### Simulation of a NK lattice ###
### Davide Fiocco, EPFL, 2013. e-mail: davide.fiocco@outlook.com ###

The C code provided here allows to:
-	initialize and simulate a (deformable) NK model at constant temperature T (at specified N and K and T) using a Monte Carlo algorithm.
-	deform an NK model in an oscillatory way varying the strain in the fashion: 
		a) 0 -> g1 -> 0 -> -g1 -> 0 -> ... (repeating)
		b) 0 -> g1 -> 0 -> -g1 -> 0 -> g2 -> 0 -> -g2 -> 0 -> ... (repeating)
	following an athermal quasi-static protocol. 
	Such deformation can be performed on configurations generated from Monte Carlo (constant T) or deformation runs (see below).  
	
1. SIMULATION AT SPECIFIED T

To initialize and simulate at constant T, run:

$ make nk 
$ ./run < parameters.dat

where parameters.dat is a file of the form:
--------------------------------
N				20
K				10
T 				0.6
t_steps 		20
disorder_file	dis.dat
output_file		eq.dat
--------------------------------

where N, K, T are specified by the respective values, the system is run for t_steps Monte Carlo sweeps and the couplings of the system are generated at random using a lagged Fibonacci number generator, and saving the result is saved in the disorder_file.
The output_file contains the configurations generated in the simulations, and is (hopefully) self-explanatory.

2. OSCILLATORY DEFORMATION
To deform a system generated from a constant T simulation, and deform it in an oscillatory way following the protocol 0 -> g1 -> 0 -> -g1 -> 0 -> ... (repeating)

$ make dnk
$ ./drun < dparameters.dat

where dparameters.dat is a file of the form:
--------------------------------
N				20
K				10
gamma_max 		0.3
dgamma			0.001
g_steps			5000
disorder_file	dis.dat
initial_configuration	eq.dat
nconf			1
output_file		def.dat
dump_0_shear_only 1
--------------------------------

where gamma_max is the value of g1; d_gamma is equal to the increment in strain, after which the system energy is minimized by performing a steepest descent energy minimization; g_steps is the total number of strain increments (the total accumulated strain is thus dgamma*g_steps.
System couplings and initial configuration file (generated by a Monte Carlo constant-temperature simulation) are specified by the strings corresponding to disorder_file and initial_configuration; nconf specifies which step of the Monte Carlo constant-temperature simulation is used as initial configuration; output_file specifies the file where the configurations visited during the deformation are saved; dump_0_shear_only can assume the values 0 or 1, if the configurations saved in output_file respectively if (0) configurations need to be saved for all strains or (1) configurations of zero strain only are to be saved.

3. OSCILLATORY DEFORMATION (2 values)
To deform a system generated from a constant T simulation, and deform it in an oscillatory way following the protocol 0 -> g1 -> 0 -> -g1 -> 0 -> g2 -> 0 -> -g2 -> 0 -> ... (repeating)

$ make d2nk
$ ./d2run < dparameters.dat

where d2parameters.dat is a file of the form:
--------------------------------
N				20
K				10
gamma_max_1 	0.2
gamma_max_2 	0.3
dgamma			0.001
g_steps			5000
disorder_file	dis.dat
initial_configuration	eq.dat
nconf			1
output_file		d2ef.dat
dump_0_shear_only 1
--------------------------------

where gamma_max_1 and gamma_max_2 are the values of g1 and g2 respectively; d_gamma is equal to the increment in strain, after which the system energy is minimized by performing a steepest descent energy minimization; g_steps is the total number of strain increments (the total accumulated strain is thus dgamma*g_steps.
System couplings and initial configuration file (generated by a Monte Carlo constant-temperature simulation) are specified by the strings corresponding to disorder_file and initial_configuration; nconf specifies which step of the Monte Carlo constant-temperature simulation is used as initial configuration; output_file specifies the file where the configurations visited during the deformation are saved; dump_0_shear_only can assume the values 0 or 1, if the configurations saved in output_file respectively if (0) configurations need to be saved for all strains or (1) configurations of zero strain only are to be saved.

4. MEMORY READ (from systems subjected to 2. OSCILLATORY DEFORMATION)

To perform a memory read (which is a single deformation cycle of amplitude gamma_max) on a system deformed by oscillations of amplitude g1 run:

$ make ddnk
$ ./ddrun < ddparameters.dat

where ddparameters.dat is a file of the form:
--------------------------------
N				20
K				10
gamma_max 		0.3
dgamma			0.001
g_steps			1201
disorder_file	dis.dat
initial_configuration	def.dat
nconf			2
output_file		ddef.dat
dump_0_shear_only 1
--------------------------------

The code performs the same deformation operations seen in 2., but starting from a configuration *deformed* in a cyclic way with an amplitude g1.
The parameter g_steps should be calculated by an external script and set equal to int(4.*gamma_max/dgamma) + 1 so to perform a single oscillation cycle.

5. MEMORY READ (from systems subjected to 3. OSCILLATORY DEFORMATION with 2 values)

To perform a memory read (which is a single deformation cycle of amplitude gamma_max) on a system deformed by oscillations of amplitude g1 and g2 run:

$ make dd2nk
$ ./dd2run < dd2parameters.dat

where dd2parameters.dat is a file of the form:
--------------------------------
N				20
K				10
gamma_max 		0.3
dgamma			0.001
g_steps			1201
disorder_file	dis.dat
initial_configuration	d2ef.dat
nconf			2
output_file		dd2ef.dat
dump_0_shear_only 1
--------------------------------

The code performs the same operations seen in 2., but starting from a configuration *deformed* with an oscillatory protocol using two amplitudes g1 and g2.
The parameter g_steps should be calculated by an external script and set equal to int(4.*gamma_max/dgamma) + 1 so to perform a single oscillation cycle.

This C code above should be wrapped with scripts and run on multiple instances of the system, so to average over several instances of disorder (the couplings).
